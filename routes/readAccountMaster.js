/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AccountMasterRead',
    Heading:'AccountMaster',
    Id:{label :'Id'},
    AccCode:{label :'AccCode'},
    AccName:{label :'AccName'},
    AccDescription:{label :'AccDescription'},
    AccGroupId:{label :'AccGroupId'},
    GeneralLedger:{Heading:'GeneralLedger',
        Id:{header:'Id'},
        AccCode:{header:'AccCode'},
        CreateDate:{header:'CreateDate'},
        Description:{header:'Description'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        Posted:{header:'Posted'},
        Source:{header:'Source'},
        },
    ProductAccount:{Heading:'ProductAccount',
        Id:{header:'Id'},
        Code:{header:'Code'},
        Name:{header:'Name'},
        Description:{header:'Description'},
        Type:{header:'Type'},
        AccStock:{header:'AccStock'},
        AccAdjgl:{header:'AccAdjgl'},
        AccPurchase:{header:'AccPurchase'},
        AccMaterial:{header:'AccMaterial'},
        AccWip:{header:'AccWip'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAccountMaster?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAccountMaster = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAccountMaster(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAccountMaster');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var generalLedger = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchGeneralLedger(jsonObj,function(err,rows) {
                jsonObj.generalLedger = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var productAccount = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchProductAccount(jsonObj,function(err,rows) {
                jsonObj.productAccount = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AccountMasterReadPage',parameter);
    }    
    Promise.all([readAccountMaster,generalLedger,productAccount]).then(sendResult);
});

module.exports = router;
