/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */

const mysql = require('mysql');
const mqtt = require('mqtt');
const mybatisMapper = require('mybatis-mapper');

const mqttUsername = 'admin';
const mqttPassword = '1234';
const dbpool = mysql.createPool({
    connectionLimit : 100,
    host: 'localhost',
    user: 'root',
    password : '',
    database: 'general_ledger',
    debug    :  false
});

const createQuery = function(mapper,namespace,method,jsonObj){
    mybatisMapper.createMapper(mapper);
    var format = {language: 'sql', indent: '  '};
    var query = mybatisMapper.getStatement(namespace,method, jsonObj, format);
    return query;
}
    
const options = {
  port: 1883,
  host: 'mqtt://localhost',
  clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),
  username: mqttUsername,
  password: mqttPassword,
  keepalive: 60,
  reconnectPeriod: 1000,
  protocolId: 'MQTT',
  clean: true,
  encoding: 'utf8'
};

const connector = mqtt.connect("mqtt://localhost",options);

connector.on('connect', function () {
  console.log('Connected to middleware ('+options.host+':'+options.port+')');
  connector.subscribe('sensor/'+mqttUsername+'/post');
});

module.exports = {

    Dao: class Dao {

        constructor() {
            this.connector = connector;
        }
          
        getMqttConnector(){
            return this.connector;
        }

        searchAccountGroup(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountGroupSearchMapper.xml'], 'searchAccountGroupMapper', 'searchAccountGroup', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAccountMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountMasterSearchMapper.xml'], 'searchAccountMasterMapper', 'searchAccountMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAccountSection(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountSectionSearchMapper.xml'], 'searchAccountSectionMapper', 'searchAccountSection', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesSearchMapper.xml'], 'searchAppAuthoritiesMapper', 'searchAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactSearchMapper.xml'], 'searchAppContactMapper', 'searchAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesSearchMapper.xml'], 'searchAppGroupAuthoritiesMapper', 'searchAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersSearchMapper.xml'], 'searchAppGroupMembersMapper', 'searchAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsSearchMapper.xml'], 'searchAppGroupsMapper', 'searchAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusSearchMapper.xml'], 'searchAppMenusMapper', 'searchAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageSearchMapper.xml'], 'searchAppMessageMapper', 'searchAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsSearchMapper.xml'], 'searchAppPersistentLoginsMapper', 'searchAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomSearchMapper.xml'], 'searchAppRoomMapper', 'searchAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersSearchMapper.xml'], 'searchAppUsersMapper', 'searchAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchGeneralLedger(jsonObj, callback) {
            var query = createQuery(['./mapper/GeneralLedgerSearchMapper.xml'], 'searchGeneralLedgerMapper', 'searchGeneralLedger', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductSearchMapper.xml'], 'searchProductMapper', 'searchProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchProductAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductAccountSearchMapper.xml'], 'searchProductAccountMapper', 'searchProductAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchStockMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/StockMasterSearchMapper.xml'], 'searchStockMasterMapper', 'searchStockMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAccountGroup(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountGroupReadMapper.xml'], 'readAccountGroupMapper', 'readAccountGroup', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAccountMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountMasterReadMapper.xml'], 'readAccountMasterMapper', 'readAccountMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAccountSection(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountSectionReadMapper.xml'], 'readAccountSectionMapper', 'readAccountSection', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesReadMapper.xml'], 'readAppAuthoritiesMapper', 'readAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactReadMapper.xml'], 'readAppContactMapper', 'readAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesReadMapper.xml'], 'readAppGroupAuthoritiesMapper', 'readAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersReadMapper.xml'], 'readAppGroupMembersMapper', 'readAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsReadMapper.xml'], 'readAppGroupsMapper', 'readAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusReadMapper.xml'], 'readAppMenusMapper', 'readAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageReadMapper.xml'], 'readAppMessageMapper', 'readAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsReadMapper.xml'], 'readAppPersistentLoginsMapper', 'readAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomReadMapper.xml'], 'readAppRoomMapper', 'readAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersReadMapper.xml'], 'readAppUsersMapper', 'readAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readGeneralLedger(jsonObj, callback) {
            var query = createQuery(['./mapper/GeneralLedgerReadMapper.xml'], 'readGeneralLedgerMapper', 'readGeneralLedger', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductReadMapper.xml'], 'readProductMapper', 'readProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readProductAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductAccountReadMapper.xml'], 'readProductAccountMapper', 'readProductAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readStockMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/StockMasterReadMapper.xml'], 'readStockMasterMapper', 'readStockMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAccountGroup(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountGroupNewMapper.xml'], 'newAccountGroupMapper', 'newAccountGroup', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAccountMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountMasterNewMapper.xml'], 'newAccountMasterMapper', 'newAccountMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAccountSection(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountSectionNewMapper.xml'], 'newAccountSectionMapper', 'newAccountSection', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesNewMapper.xml'], 'newAppAuthoritiesMapper', 'newAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactNewMapper.xml'], 'newAppContactMapper', 'newAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesNewMapper.xml'], 'newAppGroupAuthoritiesMapper', 'newAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersNewMapper.xml'], 'newAppGroupMembersMapper', 'newAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsNewMapper.xml'], 'newAppGroupsMapper', 'newAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusNewMapper.xml'], 'newAppMenusMapper', 'newAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageNewMapper.xml'], 'newAppMessageMapper', 'newAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsNewMapper.xml'], 'newAppPersistentLoginsMapper', 'newAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomNewMapper.xml'], 'newAppRoomMapper', 'newAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersNewMapper.xml'], 'newAppUsersMapper', 'newAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newGeneralLedger(jsonObj, callback) {
            var query = createQuery(['./mapper/GeneralLedgerNewMapper.xml'], 'newGeneralLedgerMapper', 'newGeneralLedger', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductNewMapper.xml'], 'newProductMapper', 'newProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newProductAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductAccountNewMapper.xml'], 'newProductAccountMapper', 'newProductAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newStockMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/StockMasterNewMapper.xml'], 'newStockMasterMapper', 'newStockMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAccountGroup(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountGroupWriteMapper.xml'], 'writeAccountGroupMapper', 'writeAccountGroup', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAccountMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountMasterWriteMapper.xml'], 'writeAccountMasterMapper', 'writeAccountMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAccountSection(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountSectionWriteMapper.xml'], 'writeAccountSectionMapper', 'writeAccountSection', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesWriteMapper.xml'], 'writeAppAuthoritiesMapper', 'writeAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactWriteMapper.xml'], 'writeAppContactMapper', 'writeAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesWriteMapper.xml'], 'writeAppGroupAuthoritiesMapper', 'writeAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersWriteMapper.xml'], 'writeAppGroupMembersMapper', 'writeAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsWriteMapper.xml'], 'writeAppGroupsMapper', 'writeAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusWriteMapper.xml'], 'writeAppMenusMapper', 'writeAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageWriteMapper.xml'], 'writeAppMessageMapper', 'writeAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsWriteMapper.xml'], 'writeAppPersistentLoginsMapper', 'writeAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomWriteMapper.xml'], 'writeAppRoomMapper', 'writeAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersWriteMapper.xml'], 'writeAppUsersMapper', 'writeAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeGeneralLedger(jsonObj, callback) {
            var query = createQuery(['./mapper/GeneralLedgerWriteMapper.xml'], 'writeGeneralLedgerMapper', 'writeGeneralLedger', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductWriteMapper.xml'], 'writeProductMapper', 'writeProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeProductAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductAccountWriteMapper.xml'], 'writeProductAccountMapper', 'writeProductAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeStockMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/StockMasterWriteMapper.xml'], 'writeStockMasterMapper', 'writeStockMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAccountGroup(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountGroupDeleteMapper.xml'], 'deleteAccountGroupMapper', 'deleteAccountGroup', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAccountMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountMasterDeleteMapper.xml'], 'deleteAccountMasterMapper', 'deleteAccountMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAccountSection(jsonObj, callback) {
            var query = createQuery(['./mapper/AccountSectionDeleteMapper.xml'], 'deleteAccountSectionMapper', 'deleteAccountSection', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesDeleteMapper.xml'], 'deleteAppAuthoritiesMapper', 'deleteAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactDeleteMapper.xml'], 'deleteAppContactMapper', 'deleteAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesDeleteMapper.xml'], 'deleteAppGroupAuthoritiesMapper', 'deleteAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersDeleteMapper.xml'], 'deleteAppGroupMembersMapper', 'deleteAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsDeleteMapper.xml'], 'deleteAppGroupsMapper', 'deleteAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusDeleteMapper.xml'], 'deleteAppMenusMapper', 'deleteAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageDeleteMapper.xml'], 'deleteAppMessageMapper', 'deleteAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsDeleteMapper.xml'], 'deleteAppPersistentLoginsMapper', 'deleteAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomDeleteMapper.xml'], 'deleteAppRoomMapper', 'deleteAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersDeleteMapper.xml'], 'deleteAppUsersMapper', 'deleteAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteGeneralLedger(jsonObj, callback) {
            var query = createQuery(['./mapper/GeneralLedgerDeleteMapper.xml'], 'deleteGeneralLedgerMapper', 'deleteGeneralLedger', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductDeleteMapper.xml'], 'deleteProductMapper', 'deleteProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteProductAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/ProductAccountDeleteMapper.xml'], 'deleteProductAccountMapper', 'deleteProductAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteStockMaster(jsonObj, callback) {
            var query = createQuery(['./mapper/StockMasterDeleteMapper.xml'], 'deleteStockMasterMapper', 'deleteStockMaster', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        
    }
}
